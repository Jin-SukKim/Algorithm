트라이(Trie)

트라이는 검색 트리의 일종으로 일반적으로 키가 문자열인, 동적 배열 또는
연관 배열을 저장하는 데 사용되는 정렬된 트리 자료구조다.

실무에 매우 유용하게 쓰이는 자료구조로서, 특히 자연어 처리(NLP) 분야에서
문자열 탐색을 위한 자료구조로 널리 쓰인다.

검색을 뜻하는 retrieval에서 따왔따.

트라이는 트리와 유사하지만 이진 트리의 모습이 아닌,
전형적인 다진 트리(m-ary Tree)의 형태를 가진다.

트라이는 각가의 문자 단위로 색인을 구축한 것과 유사하다.
(ex: apple 단어를 수백 개의 문자에서 찾을 때 트라이 탐색은 단 다섯번만에 파악 가능하다.)
문자열 길이만큼만 탐색하면 되기때문이다.

자연어 처리 분아야에서는 형태소 분석기에서 분석 패턴을 트라이로 만들어두고
자연어 문장에 대해 패턴을 찾아 처리하는 등으로 활용하고 있다.

a -> p, c, b
p -> p (좌측)
p -> l, e (중간, 우측)
l -> e (좌측)
e -> a (우측)
a -> l, r

apple, appear, appeal 등으로 구성한 트라이

만약 apple을 찾는다면, a -> p -> p 순으로 문자별 일치하는 노드를 찾아 내려가면 된다.
apple이므로 다음은 l 그리고 e를 찾으면 된다.

결국, 트라이에서는 각  문자열 길이만큼만 탐색하면 원하는 결과를 찾을 수 있다.

트라이는 문자열을 위한 트리의 형태이기 때문에 사실상 문자 개수만큼 자식이
있어 트리 형태로 나타내보면 상단히 많은 자식 노드를 갖고 있는 트리임을 확인할 수 있다.


장점

트라이 구조체는 문자열을 빠르게 찾을 수있다.
문자열의 추가와 탐색 모두 빠르다

단점

필요한 메모리의 크기가 너무 크다.
문자열이 모두 영소문자로 이루어져도 자식노드를 가리키는데 26개의 포인터가
필요하기에 메모리가 많이 필요하다.

단점을 보안하기 위해 map이나 vector를 이용하는 것도 좋다.