최단 경로 문제는 각 간선(Edge)의 가중치(Weight)의 합이 최소가 되는
두 정점(vertex) 또는 노드(Node) 사이의 경로를 찾는 문제다

쉽게 내비게이션에서 목적지로 이동할 때 경로 탐색할 때의 경로가 최단 경로 문제다.

정점(vertex)은 교차로에 해당하고 간선(Edge)은 길에 해당한다.
가중치(Weight)는 거리나 시간과 같은 이동 비용에 해당한다.

그래프의 종류와 특성에 따라 각각 최적화된 다양한 최단 경로 알고리즘이 존재한다.
이 중 가장 유명한 것은 Dijkstra 알고리즘이다.

이 알고리즘은 항상 노드 주변의 최단 경로만을 택하는 대표적인 Greedy 알고리즘 중 하나로
단순할 뿐만 아니라 실행 속도 또한 빠르다.
이 알고리즘은 노드 주변을 탐색할 떄 BFS(너비 우선 탐색)을 이용하는 대표적인 알고리즘이다.

DFS는 한 사람이 미로를 찾아 헤매는 과정과 비슷하며,
BFS는 여러명의 사람이 각기 서로 다른 갈림길로 흩어져서 길을 찾는 것과 비슷하다.

Dijkstra 알고리즘은 음수인 가중치를 사용하지 못한다.
임의의 정점을 출발 집합에 더할 때, 그 정점까지의 최단거리는 계산이 끝났다는 확신을 갖고 더한다.
만약 더 짧은 경로가 존재한다면 논리적 기반이 무너진다.

이때는 모두 값을 더해 양수로 변환되는 방법이 있고,
이것도 어렵다면 벨만-포드(Bellman-Ford) 알고리즘 같은 음수 가중치를 계산 가능한 다른 알고리즘을 사용한다.

같은 이유로 최장 거리를 구하는데 Dijkstra 알고리즘을 사용할 수도 있다.

Dijkstra 알고리즘 최초 구현에는 시간 복잡도가 O(V^2)이나 현재는 BFS 사용시
가장 가까운 순서를찾을 때 Priority-Queue를 적용해 시간복잡도가 O((V+E)log V),
모든 정점이 출발지에서 도달이 가능하다면 최종적으로 O(E log V)가 된다.
