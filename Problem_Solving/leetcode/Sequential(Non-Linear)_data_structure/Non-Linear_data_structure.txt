비선형 자료구조

그래프(Graph)

객체의 일부 pair들이 연관되어 있는 객체 집합 구조를 의미한다.

오일러 경로는 모든 정점(Vertex)가 간선(Edge)로 이어지는 그래프는
모든 정점이 짝수 개의 차수(Degree)를 갖는다면 한번씩만 건너 목표에 도달하는게 성립한다.
모든 간선(Edge)을 한 번씩 방문하는 유한 그래프(Finite graph)를 오일러 경로라한다.

해밀턴 경로는 각 정점을 한 번씩 방문하는 무향 또는 유향 그래프 경로다.

오일러 경로는 간선(Edge)를 기준으로 하고 해밀턴 경로는 정점(Vertex)를 기준으로 한다.
하지만 작은 차이에도 불구하고 해밀턴 경로는 최적 알고리즘이 없는 
대표적인 NP-Complete 문제다.

원래의 출발점으로 돌아오는 경로는 해밀턴 순환이라 하는데 이 중 최단 거리를
찾는 문제는 유명한 외판원 문제(Travelling Salesman Problem)이다.

그래프 순회는 그래프 탐색(Search)라고도 불리며 그래프의 각 정점을 반문하는 과정이다.

DFS & BFS

그래프 순회(Graph Traversals)는 크게 깊이 우선 탐색(Depth-First Search)와
너비 우선 탐색(Breadth-First Search)가 있다.

DFS는 주로 스택이나 재귀로 구현하며 백트래킹을 통해 뛰어난 효능을 보인다.
BFS는 주로 큐로 구현하며 그래프의 최단 경로를 구하는 문제 등에 사용된다.
(Dijsktra algorithm, 다익스트라 알고리즘으로 최단 경로를 찾는데 BFS가 사용된다)

그래프를 표현하는 방법에는 크게 인접 행렬(Adjacency Matrix)와
인접 리스트(Adjacency List) 방법들이있다.

인접 리스트는 출발 노드를 키로, 도착 노드르 값으로 표현할 수 있다.

BFS는 재귀로는 구현할 수 없다.

백트래킹(Backtracking)

백트래킹(Backtracking)은 해결책에대한 후보를 구축해 나아가다 가능성이 없다고
판단되는 즉시 후보를 포기(Backtrack)해 정답을 찾아가는 범용적인 알고리즘으로
제약 충족 문제(Constraint Satisfaction Problems)에 유용하다.
(트리의 탐색 최적화 문제와 관련이 깊다)

백트래킹은 DFS와 같은 방식으로 탐색하는 모든 방법을 뜻한다.

큰 트리를 DFS로 탐색을 시도하고 가능성이 없는 후보는 즉시 포기하고 백트래킹하면
트리의 불필요한 대부분을 버릴수 있는데 이를 트리의 가지치기(Pruning)이라 하며
탐색을 최적화할 수 있지만 최악의 경우는 Brute-force와 같은 시간/공간 효율을 가지게 된다.


제약 충족문제(Constraint Satisfaction Problems)

제역 충족 문제란 수많은 제약 조건(Constraints)를 충족하는 상태(States)를
찾아내는 수학 문제다.
(ex: 스도쿠 - 1에서 9까지 숫자를 한 번만(제약 조건) 넣는 문제, 
십자말 풀이, 8퀸, 4색 등 퍼즐 문제, 배낭 문제, 문자열 Parsing, 조합 최적화 등)

백트래킹은 이 문제를 풀이하는데 필수적인 알고리즘이다.
(가지치기를 통해 최적화하기 때문이다.)

특히 인공지능이나 경영 과학 분야에서 연구되며 합리적인 시간 내에 문제를 풀기위해
휴리스틱과 조합 탐색 같은 개념을 함께 결합해사용한다.

참고로 그래프 문제와 트리 문제는 서로 유사한 점이 많다
