Binary Search Tree(BST) - 이진 탐색 트리

이진 탐색 트리는 정렬된 트리를 말하는데, 노드의 왼쪽 서브트리에는
그 노드의 값보다 작은 값들로 지닌 노드들로 이뤄져 있고
오른쪽 서브트리에는 그 노드의 값과 같거나 큰 값들을 지닌 노드들로 이루어져 있다.

이 트리의 가장 큰 장점은 탐색 시 시간 복잡도가 O(log n)이라는 점이다.

로그는 1억 개의 아이템도 단 27번이면 모두 찾을 수 있는 마법같은 수식이다.
이산수학에도 등장하고 카드마술에까지 이진 탐색(트리가 아닌 Binary Search만을
뜻한다) 등장한다.

운이 나쁘면 O(n)에 근접한 시간이 소요될 수 있다.
이 경우는 트리가 비효율적으로 구성된 경우인데 연결 리스트와 다르지 않다.
이 단점을 고치기 위해 사용되는 것이 자가 균형 이진 탐색 트리다.

자가 균형 이진 탐색 트리(Self-Balancing Binary Search Tree)

자가 균형(또는 높이 균형) 이진 ㅌ마색 트리는 삽입, 삭제 시 자동으로
높이를 작게 유지하는 노드 기반의 이진 탐색 트리다.

최악의 경우에도 이진 트리의 균형이 잘 맞도록 유지한다.
즉 높이를 가능한 한 낮게 유지하는 것이 중요하다는 점이다.

불균형과 균형의 성능 차이는 크다.

자가 균형 이진 탐색 트리의 대표적인 형태는 AVL 트리와 레드-블랙 트리 등이 있다.
특히 레드-블랙 트리는 높은 효율성으로 실무에서도 빈번하게 쓰인다.

자바의 해시맵 또한 효율적인 저장 구조를 위해 해시 테이블의 개별 체이닝 시
연결 리스트와 함께 레드-블랙 트리를 형행해 저장하는 구조로 구현되어 있따.



BST는 이진 검색을 적용한 이진 트리고 BST를 만들기 위해선 정렬된 배열을 
이진 검색으로 계속 쪼개 나가기만 하면 된다.
