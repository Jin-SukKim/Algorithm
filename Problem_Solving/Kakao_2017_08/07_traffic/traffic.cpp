/*
    7. 추석 트래픽(난이도: 상)
    이번 추석에도 시스템 장애가 없는 명절을 보내고 싶은 어피치는 서버를 증설해야 
    할지 고민이다. 장애 대비용 서버 증설 여부를 결정하기 위해 작년 추석 기간인 
    9월 15일 로그 데이터를 분석한 후 초당 최대 처리량을 계산해보기로 했다. 
    초당 최대 처리량은 요청의 응답 완료 여부에 관계없이 임의 시간부터 
    1초(=1,000밀리초)간 처리하는 요청의 최대 개수를 의미한다.

    입력 형식

    solution 함수에 전달되는 lines 배열은 N(1 ≦ N ≦ 2,000)개의 로그 문자열로 
    되어 있으며, 각 로그 문자열마다 요청에 대한 응답완료시간 S와 처리시간 T가 
    공백으로 구분되어 있다.

    응답완료시간 S는 작년 추석인 2016년 9월 15일만 포함하여 고정 길이 
    2016-09-15 hh:mm:ss.sss 형식으로 되어 있다.

    처리시간 T는 0.1s, 0.312s, 2s 와 같이 최대 소수점 셋째 자리까지 기록하며 
    뒤에는 초 단위를 의미하는 s로 끝난다.

    예를 들어, 로그 문자열 2016-09-15 03:10:33.020 0.011s은 “2016년 9월 15일 
    오전 3시 10분 33.010초”부터 “2016년 9월 15일 오전 3시 10분 33.020초”까지 
    “0.011초” 동안 처리된 요청을 의미한다. (처리시간은 시작시간과 끝시간을 포함)

    서버에는 타임아웃이 3초로 적용되어 있기 때문에 처리시간은 
    0.001 ≦ T ≦ 3.000이다.

    lines 배열은 응답완료시간 S를 기준으로 오름차순 정렬되어 있다.

    출력 형식

    solution 함수에서는 로그 데이터 lines 배열에 대해 초당 최대 처리량을 리턴한다.
    
    입출력 예제

    예제 1
    
    입력: [ “2016-09-15 01:00:04.001 2.0s”, “2016-09-15 01:00:07.000 2s” ]
    출력: 1
    
    예제 2
    
    입력: [ “2016-09-15 01:00:04.002 2.0s”, “2016-09-15 01:00:07.000 2s” ]
    출력: 2
    설명: 처리시간은 시작시간과 끝시간을 포함하므로 첫 번째 로그는 
    01:00:02.003 ~ 01:00:04.002에서 2초 동안 처리되었으며, 
    두 번째 로그는 01:00:05.001 ~ 01:00:07.000에서 2초 동안 처리된다. 
    따라서, 첫 번째 로그가 끝나는 시점과 두 번째 로그가 시작하는 시점의 구간인 
    01:00:04.002 ~ 01:00:05.001 1초 동안 최대 2개가 된다.
    
    예제 3
    입력: [ “2016-09-15 20:59:57.421 0.351s”, “2016-09-15 20:59:58.233 1.181s”,
    “2016-09-15 20:59:58.299 0.8s”, “2016-09-15 20:59:58.688 1.041s”, 
    “2016-09-15 20:59:59.591 1.412s”, “2016-09-15 21:00:00.464 1.466s”,
    “2016-09-15 21:00:00.741 1.581s”, “2016-09-15 21:00:00.748 2.31s”, 
    “2016-09-15 21:00:00.966 0.381s”, “2016-09-15 21:00:02.066 2.62s” ]
    출력: 7
    설명: 아래 타임라인 그림에서 빨간색으로 표시된 1초 각 구간의 처리량을 구해보면 
    (1)은 4개, (2)는 7개, (3)는 2개임을 알 수 있다. 
    따라서 초당 최대 처리량은 7이 되며, 동일한 최대 처리량을 갖는 1초 구간은 
    여러 개 존재할 수 있으므로 이 문제에서는 구간이 아닌 개수만 출력한다.
*/

/*
    문제 해설

    이번 테스트의 마지막 문제이고, 가장 어려운 문제입니다. 
    초당 최대 처리량이 되는 구간 윈도우를 찾아야 하는 문제인데요. 
    당연히 처음부터 끝까지 스캔하기에는 범위가 너무 크고, 
    게다가 ms 단위로 되어 있기 때문에 첫 로그 시각부터 마지막 로그 시각까지 
    1ms씩 증가시키면서 1000ms 단위의 슬라이딩 윈도우로 풀면 
    24 * 3600 * 1000 * n * 1000ms 만큼의 연산이 필요하기 때문에 이렇게는 풀 수가
    없습니다.

    그렇다고 각 로그의 시작 시각부터 마지막 시각까지 1ms 씩 움직이면 
    time(ms) * n^2 이 되며, time(ms)의 값은 대부분 천 단위 이상이기 때문에 
    마찬가지로 타임아웃이 발생하여 풀 수가 없습니다. 
    그런데 자세히 살펴보면 요청량이 변하는 순간은 각 로그의 시작과 끝뿐임을 
    알 수 있습니다. 따라서, 각 로그 별 2번의 비교 연산만 수행하면 되며 2 * n^2, 
    빅오로 정리하면 O(n^2)에 풀 수가 있습니다. 빅오에서 제거된 상수항도 매우 작기 
    때문에 이 경우 무리 없이 문제를 풀 수 있게 되며 C++ 기준으로 10ms를 넘지 않습니다.

    물론, 이 문제는 윈도우를 사용하지 않고도 풀 수 있는 방법이 있습니다. 
    효율적인 알고리즘을 쓴다면, O(n log n)으로 풀 수 있는 방법도 있으니 한 번 
    고민해보세요. 
*/
#include <string>
#include <vector>
#include <ctime>

// https://cplusplus.com/reference/ctime/strftime/
// https://jay-ji.tistory.com/14
int traffic(std::vector<std::string> lines)
{
    
}

