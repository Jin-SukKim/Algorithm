/*
Heap sort :

    - find the maximum element and place the maximum element at the end.
    Repeating this process for remaining element.
    - 시간 복잡도가 좋은편
    - 힙 정렬이 가장 유용한 경우는 전체 자료를 정렬하는 것이 아니라 가장 큰 값 몇개만 필요할 때 이다.
    - 최대값 & 최소값 찾기 좋다
    - 노드가 가지고 있는 두 자식과 비교해 더큰 자식과 노드의 위치를 바꿔준다
    - Using Heapify Algorithm - compare two children and switch position with node and bigger child than node.
    - O(n log base 2 n), O(nlog n)

    // i = parent node
    - left child = 2 * i + 1
    - right child = 2 * i + 2
*/

ex)

#include <stdio.h>

int number = 9;
int heap[9] = {7, 6, 5, 8, 2, 1, 3, 9, 5};

int main(void) {
    //heap을 구성
    for(int i = 1; i < number; i++) {
        int c = i;
        do {
            int root = (c - 1) / 2;
            if(heap[root] < heap[c]) {
                int temp = heap[root];
                heap[root] = heap[c];
                heap[c] = temp;
            }
            c = root;
        } while (c != 0);
    }

    //크기를 줄여가며 반복적으로 힙을 구성
    for (int i = number - 1; i >= 0; i--) {
        int temp =heap[0];
        heap[0] = heap[i];
        heap[i] = temp;
        int root = 0;
        int c = 1;
        do {
            c = 2 * root + 1
            //자식 중 더 큰 값을 찾기
            if(c < i - 1 && heap[c] < heap[c + 1]) {
                c++;
            }

            //root보다 자식이 크다면 교환
            if(c < i && heap[root] < heap[c]) {
                temp = heap[root];
                heap[root] = heap[c];
                heap[c] = temp;
            }
            root = c;
        } while (c < i);
    }

    //결과 출력
    for(int i = 0; i <  number; i++) {
        printf("%d", heap[i]);
    }
}

ex2)
//i = heap size / 2
void heapify(int i) {
    //왼쪽 자식 노드를 가리킨다.
    int c = 2 * i + 1;

    // 오른쪽 자식 노드가 있고, 왼쪽  자식노드보다 크다면
    if(c < number && heap[c] < heap[c + 1]) {
        c++;
    }

    //부모보다 자식이 더 크다면 위치를 교환한다.
    if(heap[i] < heap[c]) {
        int temp = heap[i];
        heap[i] = heap[c];
        heap[c] = temp;
    }

    // number / 2 까지만 수행한다
    if(c <= number / 2)
        heapify(c);
}

ex3)
// C++ program for implementation of Heap Sort 
#include <iostream> 

using namespace std; 

// To heapify a subtree rooted with node i which is 
// an index in arr[]. n is size of heap 
void heapify(int arr[], int n, int i) 
{ 
	int largest = i; // Initialize largest as root 
	int l = 2*i + 1; // left = 2*i + 1 
	int r = 2*i + 2; // right = 2*i + 2 

	// If left child is larger than root 
	if (l < n && arr[l] > arr[largest]) 
		largest = l; 

	// If right child is larger than largest so far 
	if (r < n && arr[r] > arr[largest]) 
		largest = r; 

	// If largest is not root 
	if (largest != i) 
	{ 
		swap(arr[i], arr[largest]); 

		// Recursively heapify the affected sub-tree 
		heapify(arr, n, largest); 
	} 
} 

// main function to do heap sort 
void heapSort(int arr[], int n) 
{ 
	// Build heap (rearrange array) 
	for (int i = n / 2 - 1; i >= 0; i--) 
		heapify(arr, n, i); 

	// One by one extract an element from heap 
	for (int i=n-1; i>0; i--) 
	{ 
		// Move current root to end 
		swap(arr[0], arr[i]); 

		// call max heapify on the reduced heap 
		heapify(arr, i, 0); 
	} 
} 

/* A utility function to print array of size n */
void printArray(int arr[], int n) 
{ 
	for (int i=0; i<n; ++i) 
		cout << arr[i] << " "; 
	cout << "\n"; 
} 

// Driver program 
int main() 
{ 
	int arr[] = {12, 11, 13, 5, 6, 7}; 
	int n = sizeof(arr)/sizeof(arr[0]); 

	heapSort(arr, n); 

	cout << "Sorted array is \n"; 
	printArray(arr, n); 
} 
