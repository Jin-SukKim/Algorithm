/*
Counting Sort (계수 정렬) :

    - Counting the number of objects having distinct key values (kind of hashing).
    Then calculating the position of each object in the output sequence.
    -범위 조건이 있는 경우 매우 빠른 알고리즘 (ex: 1<n<5)
    - counting number of element and store their index to count array.
    print or arrange array based on the count array

    -O(N)    
*/

ex) 

#include <stdio.h>

int main(void) {
    int temp, count[9];
    int array[15] = {1, 5, 6, 3, 4, 7, 2, 1, 0, 1, 3, 4, 5, 8, 6};

    for(int i = 0; i < 9; i++)
        count[i] = 0;
    for(int i = 0; i < 15; i++)
        count[array[i]]++; // count[array[i]] += 1;
    for(int i = 0; i < 9; i++) {
        if(count[i] != 0) {
            for(int j = 0; j < count[i]; j++) {
                printf("%d", i);
            }
        }
    }
    return 0;
}

ex2)

// C++ Program for counting sort 
#include<bits/stdc++.h> 
#include<string.h> 
using namespace std; 
#define RANGE 255 

// The main function that sort 
// the given string arr[] in 
// alphabatical order 
void countSort(char arr[]) 
{ 
	// The output character array 
	// that will have sorted arr 
	char output[strlen(arr)]; 

	// Create a count array to store count of inidividul 
	// characters and initialize count array as 0 
	int count[RANGE + 1], i; 
	memset(count, 0, sizeof(count)); 

	// Store count of each character 
	for(i = 0; arr[i]; ++i) 
		++count[arr[i]]; 

	// Change count[i] so that count[i] now contains actual 
	// position of this character in output array 
	for (i = 1; i <= RANGE; ++i) 
		count[i] += count[i-1]; 

	// Build the output character array 
	for (i = 0; arr[i]; ++i) 
	{ 
		output[count[arr[i]]-1] = arr[i]; 
		--count[arr[i]]; 
	} 

	/* 
	For Stable algorithm 
	for (i = sizeof(arr)-1; i>=0; --i) 
	{ 
		output[count[arr[i]]-1] = arr[i]; 
		--count[arr[i]]; 
	} 
	
	For Logic : See implementation 
	*/

	// Copy the output array to arr, so that arr now 
	// contains sorted characters 
	for (i = 0; arr[i]; ++i) 
		arr[i] = output[i]; 
} 

// Driver code 
int main() 
{ 
	char arr[] = "geeksforgeeks"; 

	countSort(arr); 

	cout<< "Sorted character array is " << arr; 
	return 0; 
} 

// This code is contributed by rathbhupendra 

ex3)
// Java implementation of Counting Sort 
class CountingSort 
{ 
	void sort(char arr[]) 
	{ 
		int n = arr.length; 

		// The output character array that will have sorted arr 
		char output[] = new char[n]; 

		// Create a count array to store count of inidividul 
		// characters and initialize count array as 0 
		int count[] = new int[256]; 
		for (int i=0; i<256; ++i) 
			count[i] = 0; 

		// store count of each character 
		for (int i=0; i<n; ++i) 
			++count[arr[i]]; 

		// Change count[i] so that count[i] now contains actual 
		// position of this character in output array 
		for (int i=1; i<=255; ++i) 
			count[i] += count[i-1]; 

		// Build the output character array 
		// To make it stable we are operating in reverse order. 
		for (int i = n-1; i>=0; i--) 
		{ 
			output[count[arr[i]]-1] = arr[i]; 
			--count[arr[i]]; 
		} 

		// Copy the output array to arr, so that arr now 
		// contains sorted characters 
		for (int i = 0; i<n; ++i) 
			arr[i] = output[i]; 
	} 

	// Driver method 
	public static void main(String args[]) 
	{ 
		CountingSort ob = new CountingSort(); 
		char arr[] = {'g', 'e', 'e', 'k', 's', 'f', 'o', 
					'r', 'g', 'e', 'e', 'k', 's'
					}; 

		ob.sort(arr); 

		System.out.print("Sorted character array is "); 
		for (int i=0; i<arr.length; ++i) 
			System.out.print(arr[i]); 
	} 
} 
/*This code is contributed by Rajat Mishra */
